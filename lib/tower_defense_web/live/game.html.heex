<main class="bg-gray-400 w-screen h-screen flex">
  <div id="main-panel" class="flex flex-col w-3/4">
    <header class="px-4 bg-gray-800 text-neutral-100 text-md font-bold font-mono text-center">
      üè∞ Tower Defense üè∞
    </header>

    <div class="grid grid-cols-5 py-2 px-4 bg-gray-800 font-bold">
      <div class="text-neutral-200">Time: <%= @state.time %></div>
      <div class="text-sky-500">Level: <%= @state.level %></div>
      <div class="text-green-500">Lives: <%= @state.lives %></div>
      <div class="text-yellow-500">Gold: <%= @state.gold %></div>
      <div class="text-red-500">Score: <%= @state.score %></div>
    </div>

    <div id="board-container" phx-hook="TrackMousePosition" class="flex flex-col items-center py-4 bg-neutral-300 h-full">
      <div
        id="board"
        phx-hook="TrackBoardDisposition"
        class="
          relative m-auto w-[796px] h-[796px] m-4 bg-gray-200
          border border-gray-500 border-8 border-opacity-50
          rounded-sm shadow-2xl
        "
      >
        <%= for tower <- @state.towers do %>
          <.tower
            type={tower.type}
            range={@state.board.tile_size * 2}
            display_range={Tower.inside?(tower, @mouse_position)}
            size={@state.board.tile_size * 2}
            x={tower.position.top_left.x - @state.board.position.top_left.x}
            y={tower.position.top_left.y - @state.board.position.top_left.y}
          />
        <% end %>

        <%= for creep <- @state.creeps do %>
          <.creep
            type={creep.type}
            health={creep.health}
            x={creep.position.x - @state.board.position.top_left.x}
            y={creep.position.y - @state.board.position.top_left.y}
          />
        <% end %>

        <%= for tile <- @state.path do %>
          <.tile x={tile.x} y={tile.y} size={@state.board.tile_size}/>
        <% end %>
      </div>
    </div>

    <div id="status-panel" class="p-3 w-full fixed bottom-3 z-0 bg-gray-800">
      <div class="flex" style={"margin-left: -#{@state.time}px"}>
        <%= for {level, type} <- @config[:levels] do %>
          <div class={"flex items-center space-x-2 w-28 px-2 py-1 ml-[-2px] border border-2 border-gray-600 #{@config[:status_colors][type]}"}>
            <div class="text-2xl text-gray-700"><%= level %></div>
            <div class="text-sm font-bold uppercase text-white w-full text-center"><%= type %></div>
          </div>
        <% end %>
      </div>
      <div id="cursor" class="fixed bottom-0 w-28 h-12 ml-[-2px] mb-[22px] border border-2 border-orange-400"></div>
    </div>
  </div>

  <div class={"#{if @state.paused, do: "fixed", else: "hidden"} z-50 bg-gray-800 w-3/4 h-full opacity-80 flex items-center"}>
    <div class="m-auto text-orange-400 text-6xl">Paused...</div>
  </div>

  <div id="right-panel" class="flex flex-col w-1/4 z-10 bg-zinc-700 text-neutral-200">
    <div class="flex flex-col p-2 space-y-2 text-lg">
      <div class="flex justify-between">
        <%= if @state.paused do %>
          <button class="px-6 border border-2 border-orange-400" phx-click="toggle-pause">
            RESUME
          </button>
        <% else %>
          <button class="px-6 border border-2 border-orange-400" phx-click="toggle-pause">
            PAUSE
          </button>
        <% end %>
        <button class="px-6 border border-2 border-orange-400" phx-click="reset">
          RESET
        </button>
      </div>
      <div phx-click="send-next-level" class="border border-2 border-orange-400 text-center">Send next level</div>
    </div>

    <div id="towers" class="flex justify-between p-2">
      <%= for type <- @config[:towers] do %>
        <.tower
          type={type}
          phx-click="select-tower"
          phx-value-type={type}
          size={30}
          selected={@selected_tower == type}
        />
      <% end %>
    </div>

    <div class="p-2 font-mono text-sm flex flex-col gap-4">
      <div class="text-lg">DEBUG</div>

      <div>
        <div class="font-bold text-sm">board:</div>
        <div class="ml-2">top-left: <%= inspect(@state.board.position.top_left) %></div>
        <div class="ml-2">bottom-right: <%= inspect(@state.board.position.bottom_right) %></div>
      </div>

      <div>
        <div class="font-bold text-sm">towers:</div>
        <%= for tower <- @state.towers do %>
          <div class="ml-2">
            <div>
              <%= tower.type %>
              at (<%= tower.tiles |> Enum.map(& &1.x) |> Enum.min() %>,
              <%= tower.tiles |> Enum.map(& &1.y) |> Enum.min() %>)
            </div>
            <div class="ml-2">
              range:
              <div class="ml-2">center: <%= inspect tower.range.center %></div>
              <div class="ml-2">radius: <%= inspect tower.range.radius %></div>
            </div>
          </div>
        <% end %>
      </div>

      <div>
        <div class="font-bold text-sm">creeps:</div>
        <%= for creep <- @state.creeps do %>
          <div class="ml-2">
            <%= creep.type %> at <%= inspect(creep.position) %>
          </div>
        <% end %>
      </div>

      <div>
        <div class="font-bold text-sm">path:</div>
        <div class="ml-2"> <%= inspect(@state.path) %> </div>
      </div>

      <div>
        <div class="font-bold text-sm">mouse position:</div>
        <div class="ml-2">raw: <%= inspect(@mouse_position) %></div>
        <div class="ml-2">tile:
          <%=
            if @mouse_position do
              inspect(Tile.from_position(
                @mouse_position,
                @state.board.position.top_left,
                @state.board.tile_size
              ))
            end
          %>
        </div>
      </div>
    </div>
  </div>

  <%= case attempt_tower_placement(@selected_tower, @mouse_position, @game_pid) do %>
    <% {:ok, %{position: position}} -> %>
      <.tower
        phx-click="place-tower"
        type={@selected_tower}
        size={@state.board.tile_size * 2}
        display_range={true}
        range={@state.board.tile_size * 2}
        x={position.x}
        y={position.y}
      />
    <% {:error, _error} -> %>
  <% end %>
</main>
